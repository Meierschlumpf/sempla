// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Appointment {
    id                   String                @id @default(cuid())
    start                DateTime
    end                  DateTime
    type                 String // "lesson", "vacation", "holiday", "excursion", "event"
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    isPinned             Boolean               @default(false)
    lessonAppointment    LessonAppointment?
    excursionAppointment ExcursionAppointment?
    eventAppointment     EventAppointment?
    plan                 Plan                  @relation(fields: [planId], references: [id])
    planId               String
}

model LessonAppointment {
    id        String      @id
    parent    Appointment @relation(fields: [id], references: [id])
    subjectId String
    subject   Subject     @relation(fields: [subjectId], references: [id])
    topicId   String?
    topic     Topic?      @relation(fields: [topicId], references: [id])
}

model ExcursionAppointment {
    id          String      @id
    parent      Appointment @relation(fields: [id], references: [id])
    name        String
    description String
    location    String
}

model EventAppointment {
    id          String      @id
    parent      Appointment @relation(fields: [id], references: [id])
    name        String
    description String
}

model Subject {
    id                 String              @id @default(cuid())
    name               String
    routeName          String              @unique
    icon               String
    lessonAppointments LessonAppointment[]
    plans              Plan[]
}

model Topic {
    id      String              @id @default(cuid())
    name    String              @unique
    lessons LessonAppointment[]
}

model Area {
    id        String @id @default(cuid())
    name      String @unique
    routeName String @unique
    plans     Plan[]
}

model Plan {
    id           String        @id @default(cuid())
    isPublic     Boolean       @default(false)
    appointments Appointment[]
    subjectId    String
    subject      Subject       @relation(fields: [subjectId], references: [id])
    areaId       String
    area         Area          @relation(fields: [areaId], references: [id])
    creatorId    String
    creator      Teacher       @relation(fields: [creatorId], references: [id])
}

model Teacher {
    id        String @id @default(cuid())
    firstName String
    lastName  String
    imageUrl  String
    plans     Plan[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
